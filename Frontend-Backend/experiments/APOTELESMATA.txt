1) Μέγιστος ρυθμός κατανάλωσης μηνυμάτων από έναν Consumer με όριο επεξεργαστικής
    ισχύος 500 mCPU: 205 μηνύματα / δευτερόλεπτο. (1.4.1)

2) Πιθανή μείωση του ρυθμού κατανάλωσης μηνυμάτων με την ενεργοποίηση του 
    monitoring της χρήσης resources από τα container από 200 msgs/s σε 170 msgs/sample
    για τον έναν Consumer. (1.4.3)

3) Αυξάνοντας το όριο χρήσης cpu στον consumer στα 1000 mCPU παρατηρείται ότι μία αύξηση 
    της χρήσης του cpu από 495 mCPU σε 700 mCPU (~40%) επιφέρει αύξηση στον ρυθμό κατανάλωσης 
    μηνυμάτων από 170 μηνύματα / δευτερόλεπτο σε 240 μηνύματα / δευτερόλεπτο (~40%). (1.4.6)

4) Με τη λειτουγία τησ ΒΔ, το container χρησιμοποιεί όλο και περισσότερη μνήμη. Όταν το
    container φτάσει στα όρια της διαθέσιμης μνήμης που του έχει ανατεθεί τότε είτε 
    καταστρέφεται και επαναδημιουργείται από το k8s, είτε οδηγεί σε αποτυχία των consumers,
    οι οποίοι με την καταστροφή τους διαγράφουν και τα queues/exchanges με αποτέλεσμα να 
    σταματάει το πείραμα. (1.5.1)
    Στο (1.5.3) για να αντιμετωπιστεί αυτό το πρόβλημα αυξήθηκε το όριο χρήσης μνήμης στο 
    container της ΒΔ από 128 MB σε 256 MB. Πλέον η ΒΔ ξεκινάει με αρχική χρήση 155 ΜΒ, άρα 
    τα 128 ΜΒ όντως ήταν πρόβλημα.

5) Στο πείραμα (2.6.4) παρατηρούμε ότι αφού σταματάει να δέχεται μηνύματα ο RMQ Server από 
    τους producers, ο ρυθμός της καταναλωσης μηνυμάτων αυξάνεται σημαντικά.
    Αυτό δείχνει ότι πιθανότατα το σύστημα έχει φτάσει στα όριά του και η επεξεργαστική ισχύς 
    δεν φτάνει για να αποδίδεται επαρκώς και στην αποδοχή μηνυμάτων από τους producers και 
    στην κατανάλωση μηνυμάτων στους consumers.

6) Όπως φάνηκε από τα πειράματα (2.7.5) και (3.7.1), με ρυθμό εισαγωγής μηνυμάτων στον RMQ Server
    410 μηνύματα / δευτερόλεπτο, το μηχάνημά μου μπορεί να αποδώσει μέγιστο ρυθμό κατανάλωσης
    μηνυμάτων 330 μηνύματα / δευτερόλεπτο. Αυτό προκύπτει απ το γεγονός ότι ενώ προστέθηκε ένας
    επιπρόσθετος Consumer, ο ρυθμός κατανάλωσης μηνυμάτων συνολικά έμεινε ίδιος και αντίστοιχα μειώθηκε 
    η κατανάλωση επεξεργαστικής ισχύος στον κάθε Consumer.

1) ΠΡΕΠΕΙ ΝΑ ΒΡΩ ΠΟΙΟΣ ΕΙΝΑΙ Ο ΠΡΑΓΜΑΤΙΚΟΣ ΜΕΓΙΣΤΟΣ ΡΥΘΜΟΣ ΚΑΤΑΝΑΛΩΣΗΣ ΜΗΝΥΜΑΤΩΝ ΑΠΟ 1 CONSUMER.
    200 MSGS/S Η 170 MSGS/S??? (1.4.2 έως 1.4.6)

2) ΠΡΕΠΕΙ ΝΑ ΕΠΑΝΑΛΗΦΘΕΙ ΤΟ (1.6.1) ΧΩΡΙΣ MONITORING ΚΑΙ ΦΡΕΣΚΟ ΣΥΣΤΗΜΑ ΩΣΤΕ ΝΑ ΔΩ ΑΝ ΘΑ ΜΠΟΡΕΣΕΙ
    ΝΑ ΦΤΑΣΕΙ ΥΨΗΛΟΤΕΡΑ Ο ΡΥΘΜΟΣ ΚΑΤΑΝΑΛΩΣΗΣ ΜΗΝΥΜΑΤΩΝ, ΚΑΘΩΣ Ο CONSUMER ΔΕΝ ΕΙΝΑΙ ΣΤΑ ΟΡΙΑ ΤΟΥ ΑΚΟΜΑ.
    ΑΝ ΠΑΛΙ ΔΕΝ ΦΤΑΣΕΙ ΠΙΟ ΨΗΛΑ ΤΟΤΕ ΕΙΤΕ ΕΙΝΑΙ ΘΕΜΑ ΕΞΑΝΤΛΗΣΗΣ ΠΟΡΩΝ, ΕΙΤΕ ΘΕΜΑ ΛΕΙΤΟΥΡΓΙΚΟΤΗΤΑΣ
    ΤΟΥ ΤΡΟΠΟΥ ΚΑΤΑΝΑΛΩΣΗΣ.

3) ΠΡΕΠΕΙ ΝΑ ΕΠΑΝΛΗΦΘΕΙ ΤΟ (2.6.1 / 2.6.4) ΜΕ ΦΡΕΣΚΟ ΣΥΣΤΗΜΑ ΧΩΡΙΣ MONITORING ΓΙΑ ΝΑ ΔΩ ΑΝ ΘΑ ΑΛΛΑΞΕΙ ΚΑΤΙ.
    ΕΠΙΣΗΣ ΓΙΑ ΝΑ ΚΑΤΑΛΑΒΩ ΑΝ ΑΝΑΚΑΛΥΨΑΜΕ ΤΟ ΑΝΩ ΟΡΙΟ ΠΑΡΑΔΟΣΗΣ ΜΗΝΥΜΑΤΩΝ ΑΠ ΤΟΝ SERVER Η ΑΝ ΑΠΛΑ 
    ΕΧΟΥΜΕ ΕΞΑΝΤΛΗΣΗ ΠΟΡΩΝ ΤΟΥ ΣΥΣΤΗΜΑΤΟΣ.

4) ΝΑ ΕΠΑΝΑΛΗΦΘΕΙ ΤΟ (3.6) ΜΕ ΦΡΕΣΚΟ ΜΗΧΑΝΗΜΑ ΓΙΑΤΙ ΔΕ ΒΓΑΖΟΥΝ ΝΟΗΜΑ ΤΑ ΑΠΟΤΕΛΕΣΜΑΤΑ ΤΟΥ (3.6.1)


# Experiment # Insert_Frequency # Consuming_Frequency # DB_Insert_Frequency

# (1.1) # 60.7 # 60.68 #60.6

# (1.2) # 119.26 # 119.28 # 119.33

# (1.3) # 177.36 # 176.5 # 176.07

# (1.4.1) # 230.9 # 208.52 # 206.88
# (1.4.2) # 232.84 # 201.71 # 200.17
# (1.4.3) # 237.16 # 168.67 # 165.76 (monitoring)
# (1.4.4) # 239.44 # 171.95 # 171.46 (monitoring)
# (1.4.5) # 238.81 # 163.37 # 159.5
# (1.4.6) # 239.4 # 241.67 # 239.36 (monitoring)
# (1.4.7) # 229.98 # 229.15 # 229.37 (~610 mCPU)
# (1.4.8) # 233.47 # 195.05 # 195.27 (~499 mCPU)

# (1.5.1) DB crashed
# (1.5.2) # 292.52 # 233.71 # 237.76 (monitoring)
# (1.5.3) # 269.22 # 259.98 # 255.51 (monitoring) (Consumer crashed first 3 times)
# (1.5.4) # 297.73 # 267.41 # 268.17 (~760 mCPU)

# (1.6.1) # 295.95 # 258.74 # 256.26 (monitoring)
# (1.6.2) # 297.48 # 238.62 # 235.48 (monitoring)
# (1.6.3) # 355.09 # 268 # 266.84 (~765 mCPU)

# (2.5) # 292.06 # 290.94 # 289.12

# (2.6.1) DB crashed
# (2.6.2) # 297.23 # 230.02 # 233.79 (monitoring) (compromised results)
# (2.6.3) # 298.96 # 252.78 # 256.81 (monitoring) (compromised results)
# (2.6.4) # 299.86 # 243.57 # 250.77 (monitoring) (compromised results)
# (2.6.5) # 355.34 # 333.27 # 335.13 (~570 mCPU / consumer)
# (2.6.6) # 355.45 # 356.54 # 356.09
# (2.6.7) # 357.07 # 356.6 # 357.3

# (2.7.1) # 318.69 # 268.42 # 271.38 (monitoring)
# (2.7.2) DB crashed
# (2.7.3) # 333.88 # 339.72 # 320.33 (monitoring) (weird zig zag graph - compromised results)
# (2.7.4) # 331.64 # 328.03 # 327.95 (monitoring)
# (2.7.5) # 408.48 # 327.19 # 328.56 (monitoring) (νεο λάπτοπ)
# (2.7.6) # 410.73 # 387.51 # 386.04
# (2.7.7) # 411.33 # 399.76 # 399.06

# (3.6.1) # 344.22 # 311.09 # 308.14 
# (3.6.2) # 341.8 # 318.56 # 317.95 
# (3.6.3) # 355.63 # 355.62 # 355.8
# (3.6.4) # 357.52 # 356.48 # 362.50

# (3.7.1) # 410.44 # 338.46 # 332.32 (monitoring) (ECONNRESET on producers after they finished)
# (3.7.2) # 413.38 # 412.37 # 412.67
# (3.7.3) # 415.21 # 415.15 # 415.92

# (3.8.1) # 468.99 # 436.72 # 436.75
# (3.8.2) # 467.7 # 438.64 # 438.13

# (3.9.1) # 520.7 # 439.26 # 436.36
# (3.9.2) # 531.84 # 436.42 # 428.27