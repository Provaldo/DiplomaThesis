########################### DOCKER SYSTEM ###########################

# frontend
docker run -it --name frontend -d -p 80:80 --net=mynetwork frontend:latest

# backend
docker run -it --name backend -d -p 5000:5000 --net=mynetwork backend:latest

# mongodb
docker run -it --name mongodb -d --net=mynetwork mongo:latest

# rabbitmq
docker run -it --name rabbitmq -p 5672:5672 -p 15672:15672 --net=mynetwork rabbitmq:3-management 

########################### KUBERNETES SYSTEM ###########################

# minikube
minikube start
minikube addons enable dashboard
minikube addons enable metrics-server

# mongodb
kubectl apply -f kubernetes/mongo-persistentvolume.yaml
kubectl apply -f kubernetes/mongo-persistentvolumeclaim.yaml
kubectl apply -f kubernetes/mongo-secret.yaml
kubectl apply -f kubernetes/mongo-deployment.yaml

# mongo-express
kubectl apply -f kubernetes/mongo-configmap.yaml
kubectl apply -f kubernetes/mongo-express.yaml
(minikube service mongo-express-service) 

# backend
kubectl apply -f kubernetes/mongo-configmap.yaml	# this should already exist for the mongo-express app
kubectl apply -f kubernetes/backend-rbac.yaml
kubectl apply -f kubernetes/backend-deployment.yaml

# frontend
kubectl apply -f kubernetes/frontend-configmap.yaml
kubectl apply -f kubernetes/frontend-deployment.yaml
kubectl apply -f kubernetes/frontend-service.yaml
(minikube service frontend-service)
I replaced the above command with:
minikube tunnel

# using a stateful set for the DB instead of the deployment
kubectl apply -f kubernetes/mongo-headless-service.yaml
kubectl apply -f kubernetes/mongo-statefulset.yaml

kubectl exec -it mongo-0 -- mongo
rs.initiate()
var cfg = rs.conf()
cfg.members[0].host="mongo-0.mongo-headless:27017"
rs.reconfig(cfg)
rs.status()
rs.add("mongo-1.mongo-headless:27017")
rs.add("mongo-2.mongo-headless:27017")
rs.status()

# Now we can connect to the mongo replica set only from inside our cluster. To show how to
# do that we run another mongo container and we connect from there:
kubectl run mongo --rm -it --image mongo -- sh
# The command to connect to the replica set is the following (we can omit the port 27017 since this is the default port):
mongo mongodb://mongo-0.mongo-headless:27017,mongo-1.mongo-headless:27017,mongo-2.mongo-headless:27017
rs.status()
# or do it in one command like this:
mongo mongodb://mongo-0.mongo-headless,mongo-1.mongo-headless,mongo-2.mongo-headless --eval 'rs.status()' | grep name

# To add a new member to the mongo replica set we do this:
kubectl scale sts mongo --replicas 4
kubectl exec -it mongo-0 -- mongo
rs.add("mongo-3.mongo-headless:27017")

# To remove a member from the mongo seplica set we do this:
kubectl scale sts mongo --replicas 3
# and then manually remove the last member from the replica set:
kubectl exec -it mongo-0 -- mongo
rs.remove("mongo-3.mongo-headless:27017")

# creating the DB user that the backend will authenticate with
# first connect to the mongo container from another container and execute:
use admin
db.auth("username", "password")
db.createUser(
  {
    user: "backendUser",
    pwd: "supersecretpassword",
    roles: [ { role: "readWrite", db: "test2" } ]
)


########################### interesting commands ###########################

watch -x kubectl get all
watch -x kubectl get all -o wide

# when deleting a stateful set it might not delete all the pods. so it is considered better
# to first scale the stateful set to 0 replicas and then delete the stateful set.
kubectl scale sts nginx-sts --replicas=0
kubectl delete sts nginx-sts

# deleting a stateful set won't delete the persistent volume claims
kubectl delete pvc --all
kubectl delete pv --all

# find the current user in mongodb
db.runCommand({connectionStatus: 1})
# terminate the authenticated connection of the user in MongoDB.
db.runCommand( { logout: 1 } )

# find all users of a database
db.runCommand( { usersInfo: 1 } )

# remove a db user "user2"
db.runCommand( { dropUser: "user2" } )

